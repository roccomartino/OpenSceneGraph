/* -*-c++-*- osgBrep - Copyright (C) 2023 Rocco Martino
 *
 * This library is open source and may be redistributed and/or modified under
 * the terms of the OpenSceneGraph Public License (OSGPL) version 0.0 or
 * (at your option) any later version.  The full license is in LICENSE file
 * included with this distribution, and on the openscenegraph.org website.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * OpenSceneGraph Public License for more details.
*/

#ifndef OSGBREP_BREP
#define OSGBREP_BREP 


#include <osgBrep/Face>

#include <osg/Geometry>
#include <osg/Point>
#include <osg/LineWidth>
#include <osg/PolygonOffset>


namespace osgBrep {


    class OSGBREP_EXPORT Brep : public osg::Geode
    {
    public:

        META_Object(osgBrep, Brep);

        Brep();
        Brep(const Brep& other, const osg::CopyOp& copyop = osg::CopyOp::SHALLOW_COPY);


    protected:
        ~Brep();


    public:
        void addVertex(Vertex* vertex);
        void addEdge(Edge* edge);
        void addFace(Face* face);


        void removeVertex(Vertex* vertex);
        void removeEdge(Edge* edge);
        void removeFace(Face* face);


        void clearVertices();
        void clearEdges();
        void clearFaces();


    public:
        void compile();

        void compileVertices();
        void compileEdges();
        void compileFaces();


    public:
        inline void setShowVertices(bool show)
        {
            if (show != _showVertices)
            {
                _showVertices = show;
                showVerticesChanged();
            }
        }

        inline bool getShowVertices() const
        {
            return _showVertices;
        }

        inline void setShowEdges(bool show)
        {
            if (show != _showEdges)
            {
                _showEdges = show;
                showEdgesChanged();
            }
        }

        inline bool getShowEdges() const
        {
            return _showEdges;
        }
        
        inline void setVertexSize(float value)
        {
            _vertexSize = value;
            _vertexGeometry->getStateSet()->setAttributeAndModes(new osg::Point(_vertexSize));
        }

        inline float getVertexSize() const
        {
            return _vertexSize;
        }

        inline void setEdgeWidth(float value)
        {
            _edgeWidth = value;
            _edgeGeometry->getStateSet()->setAttributeAndModes(new osg::LineWidth(_edgeWidth));
        }

        inline float getEdgeWidth() const
        {
            return _edgeWidth;
        }

        inline void setFaceOffset(float value)
        {
            _faceOffset = value;
            _faceGeometry->getStateSet()->setAttributeAndModes(new osg::PolygonOffset(_faceOffset, 0));
        }

        inline float getFaceOffset() const
        {
            return _faceOffset;
        }


    private:
        void createVertexGeometry();
        void createEdgeGeometry();
        void createFaceGeometry();

        void showVerticesChanged();
        void showEdgesChanged();


    private:
        std::vector<osg::ref_ptr<Face>> _faces;
        std::vector<osg::ref_ptr<Edge>> _edges;
        std::vector<osg::ref_ptr<Vertex>> _vertices;

        osg::ref_ptr<osg::Geometry> _vertexGeometry;
        osg::ref_ptr<osg::Geometry> _edgeGeometry;
        osg::ref_ptr<osg::Geometry> _faceGeometry;

        bool _showVertices{ true };
        bool _showEdges{ true };

        float _vertexSize{ 6 };
        float _edgeWidth{ 2 };
        float _faceOffset{ 1 };
    };

}

#endif
