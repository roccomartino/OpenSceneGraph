/* -*-c++-*- osgEditable - Copyright (C) 2023 Rocco Martino
 *
 * This library is open source and may be redistributed and/or modified under
 * the terms of the OpenSceneGraph Public License (OSGPL) version 0.0 or
 * (at your option) any later version.  The full license is in LICENSE file
 * included with this distribution, and on the openscenegraph.org website.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * OpenSceneGraph Public License for more details.
*/

#ifndef OSGEDITABLE_EDITABLE
#define OSGEDITABLE_EDITABLE 


#include <osgEditable/Face>

#include <osg/Geometry>


namespace osgEditable {


    class OSGEDITABLE_EXPORT Editable : public osg::Geode
    {
    public:

        META_Object(osgEditable, Editable);

        Editable();
        Editable(const Editable& other, const osg::CopyOp& copyop = osg::CopyOp::SHALLOW_COPY);


    protected:
        ~Editable();


    public:
        void addVertex(Vertex* vertex);
        void addEdge(Edge* edge);
        void addFace(Face* face);


        void removeVertex(Vertex* vertex);
        void removeEdge(Edge* edge);
        void removeFace(Face* face);


        void clearVertices();
        void clearEdges();
        void clearFaces();


    public:
        void compile();

        void compileVertices();
        void compileEdges();
        void compileFaces();


    public:
        inline void setShowVertices(bool show)
        {
            if (show != _showVertices)
            {
                _showVertices = show;
                showVerticesChanged();
            }
        }

        inline bool getShowVertices() const
        {
            return _showVertices;
        }

        inline void setShowEdges(bool show)
        {
            if (show != _showEdges)
            {
                _showEdges = show;
                showEdgesChanged();
            }
        }

        inline bool getShowEdges() const
        {
            return _showEdges;
        }

        inline void setUseDisplayListForVertices(bool value)
        {
            _useDisplayListForVertices = value;
            if (_vertexGeometry.valid())
                _vertexGeometry->setUseDisplayList(value);
        }

        inline bool getUseDisplayListForVertices() const
        {
            return _useDisplayListForVertices;
        }

        inline void setUseVertexBufferObjectForVertices(bool value)
        {
            _useVertexBufferObjectForVertices = value;
            if (_vertexGeometry.valid())
                _vertexGeometry->setUseVertexBufferObjects(value);
        }

        inline bool getUseVertexBufferObjectForVertices() const
        {
            return _useVertexBufferObjectForVertices;
        }

        inline void setUseVertexArrayObjectForVertices(bool value)
        {
            _useVertexArrayObjectForVertices = value;
            if (_vertexGeometry.valid())
                _vertexGeometry->setUseVertexArrayObject(value);
        }

        inline bool getUseVertexArrayObjectForVertices() const
        {
            return _useVertexArrayObjectForVertices;
        }

        inline void setUseDisplayListForEdges(bool value)
        {
            _useDisplayListForEdges = value;
            if (_edgeGeometry.valid())
                _edgeGeometry->setUseDisplayList(value);
        }

        inline bool getUseDisplayListForEdges() const
        {
            return _useDisplayListForEdges;
        }

        inline void setUseVertexBufferObjectForEdges(bool value)
        {
            _useVertexBufferObjectForEdges = value;
            if (_edgeGeometry.valid())
                _edgeGeometry->setUseVertexBufferObjects(value);
        }

        inline bool getUseVertexBufferObjectForEdges() const
        {
            return _useVertexBufferObjectForEdges;
        }

        inline void setUseVertexArrayObjectForEdges(bool value)
        {
            _useVertexArrayObjectForEdges = value;
            if (_edgeGeometry.valid())
                _edgeGeometry->setUseVertexArrayObject(value);
        }

        inline bool getUseVertexArrayObjectForEdges() const
        {
            return _useVertexArrayObjectForEdges;
        }

        inline void setUseDisplayListForFaces(bool value)
        {
            _useDisplayListForFaces = value;
            if (_faceGeometry.valid())
                _faceGeometry->setUseDisplayList(value);
        }

        inline bool getUseDisplayListForFaces() const
        {
            return _useDisplayListForFaces;
        }

        inline void setUseVertexBufferObjectForFaces(bool value)
        {
            _useVertexBufferObjectForFaces = value;
            if (_faceGeometry.valid())
                _faceGeometry->setUseVertexBufferObjects(value);
        }

        inline bool getUseVertexBufferObjectForFaces() const
        {
            return _useVertexBufferObjectForFaces;
        }

        inline void setUseVertexArrayObjectForFaces(bool value)
        {
            _useVertexArrayObjectForFaces = value;
            if (_faceGeometry.valid())
                _faceGeometry->setUseVertexArrayObject(value);
        }

        inline bool getUseVertexArrayObjectForFaces() const
        {
            return _useVertexArrayObjectForFaces;
        }

        inline osg::Geometry* getVertexGeometry() const
        {
            return _vertexGeometry.get();
        }

        inline osg::Geometry* getEdgeGeometry() const
        {
            return _edgeGeometry.get();
        }

        inline osg::Geometry* getFaceGeometry() const
        {
            return _faceGeometry.get();
        }


    private:
        void createVertexGeometry();
        void createEdgeGeometry();
        void createFaceGeometry();

        void showVerticesChanged();
        void showEdgesChanged();


    private:
        std::vector<osg::ref_ptr<Face>> _faces;
        std::vector<osg::ref_ptr<Edge>> _edges;
        std::vector<osg::ref_ptr<Vertex>> _vertices;

        osg::ref_ptr<osg::Geometry> _vertexGeometry;
        osg::ref_ptr<osg::Geometry> _edgeGeometry;
        osg::ref_ptr<osg::Geometry> _faceGeometry;

        bool _showVertices{ true };
        bool _showEdges{ true };

        bool _useDisplayListForVertices{ true };
        bool _useDisplayListForEdges{ true };
        bool _useDisplayListForFaces{ true };

        bool _useVertexBufferObjectForVertices{ false };
        bool _useVertexBufferObjectForEdges{ false };
        bool _useVertexBufferObjectForFaces{ false };

        bool _useVertexArrayObjectForVertices{ false };
        bool _useVertexArrayObjectForEdges{ false };
        bool _useVertexArrayObjectForFaces{ false };

        float _vertexSize{ 6 };
        float _edgeWidth{ 2 };
        float _faceOffset{ 1 };
    };

}

#endif
